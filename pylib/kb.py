# -*- coding: utf-8 -*-
# kb.py
'''
Knowledgebase of naming conventions

DK_ prefix is for default known sets
'''

DK_MALE_TITLES = set([
    'sir',
    'king',
    'master',
    'uncle',
    'brother',
    'father',
    'pope',
    'mr',
    'mister',
    'lord',
    'duke',
    'priest',
    'patriarch',
    'prince',
    'his',
    'archduke',
    'emperor',
    'tsar',
    'goodman',
    "marquis",
    "marquess",
    "marquise",
    'abbot',
])


DK_FEMALE_TITLES = set([
    'dame',
    'queen',
    'maid',
    'auntie',
    'aunt',
    'sister',
    'mother',
    'miss',
    'misses',
    'mrs',
    'ms',
    'madam',
    'madame',
    'lady',
    'dutchess',
    'priestess',
    'matriarch',
    'princess',
    'her',
    'archduchess',
    'empress',
    'tsarina',
    'goodwife',
    "marchioness",
    'abbess',
])

# TODO: Gender-specific titles may still be in this list.
DK_GENDERLESS_TITLES = set([
    'dr',
    'doctor',
    'rev',
    'ab',
    '2ndlt',
    'amn',
    '1stlt',
    'a1c',
    'capt',
    'sra',
    'maj',
    'ssgt',
    'ltcol',
    'tsgt',
    'col',
    'briggen',
    '1stsgt',
    'majgen',
    'smsgt',
    'ltgen',
    'cmsgt',
    'ccmsgt',
    'cmsaf',
    'pvt',
    '2lt',
    'pv2',
    '1lt',
    'pfc',
    'cpt',
    'spc',
    'cpl',
    'ltc',
    'sgt',
    'ssg',
    'bg',
    'sfc',
    'mg',
    'msg',
    'ltg',
    '1sgt',
    'sgm',
    'csm',
    'sma',
    'wo1',
    'wo2',
    'wo3',
    'wo4',
    'wo5',
    'ens',
    'sa',
    'ltjg',
    'sn',
    'lt',
    'po3',
    'lcdr',
    'po1',
    'po2',
    'cdr',
    'cpo',
    'scpo',
    'mcpo',
    'vadm',
    'mcpoc',
    'adm',
    'mpco-cg',
    'lcpl',
    'gysgt',
    'bgen',
    'msgt',
    'mgysgt',
    'gen',
    'sgtmaj',
    'sgtmajmc',
    'wo-1',
    'cwo-2',
    'cwo-3',
    'cwo-4',
    'cwo-5',
    'rdml',
    'radm',
    'mcpon',
    'fadm',
    'cwo2',
    'cwo3',
    'cwo4',
    'cwo5',
    'rt',
    'representative',
    'rep',
    'senator',
    'cardinal',
    'secretary',
    'state',
    'foreign',
    'minister',
    'speaker',
    'president',
    'pres',
    'ceo',
    'cfo',
    'deputy',
    'dpty',
    'executive',
    'exec',
    'vice',
    'vc',
    'councillor',
    'manager',
    'mgr',
    'alderman',
    'delegate',
    'mayor',
    'lieutenant',
    'governor',
    'prefect',
    'prelate',
    'premier',
    'burgess',
    'ambassador',
    'envoy',
    "attaché",
    "chargé d'affaires",
    'provost',
    'viscount',
    'baron',
    'leader',
    'friar',
    'superior',
    'reverend',
    'bishop',
    'archbishop',
    'metropolitan',
    'presbyter',
    'catholicos',
    'vicar',
    'chaplain',
    'canon',
    'pastor',
    'primate',
    'servant',
    'venerable',
    'blessed',
    'saint',
    'member',
    'solicitor',
    'mufti',
    'grand',
    'chancellor',
    'barrister',
    'bailiff',
    'attorney',
    'advocate',
    'deacon',
    'archdeacon',
    'acolyte',
    'elder',
    'monsignor',
    'almoner',
    'prof',
    'colonel',
    'general',
    'commodore',
    'air',
    'corporal',
    'staff',
    'chief',
    'first',
    'sergeant',
    'admiral',
    'high',
    'rear',
    'brigadier',
    'captain',
    'group',
    'commander',
    'commander-in-chief',
    'wing',
    'adjutant',
    'director',
    'dir',
    'generalissimo',
    'resident',
    'surgeon',
    'officer',
    'controller',
    'academic',
    'analytics',
    'business',
    'credit',
    'financial',
    'information',
    'security',
    'knowledge',
    'marketing',
    'operating',
    'petty',
    'risk',
    'strategy',
    'technical',
    'warrant',
    'corporate',
    'customs',
    'field',
    'flag',
    'flying',
    'intelligence',
    'pilot',
    'police',
    'political',
    'revenue',
    'senior',
    'sr',
    'junior',
    'jr',
    'private',
    'principal',
    'prin',
    'coach',
    'nurse',
    'nanny',
    'docent',
    'lama',
    'druid',
    'archdruid',
    'rabbi',
    'rebbe',
    'buddha',
    'ayatollah',
    'imam',
    'bodhisattva',
    'mullah',
    'mahdi',
    'saoshyant',
    'tirthankar',
    'vardapet',
    'pharaoh',
    'sultan',
    'sultana',
    'maharajah',
    'maharani',
    'vizier',
    'chieftain',
    'comptroller',
    'courtier',
    'curator',
    'doyen',
    'edohen',
    'ekegbian',
    'elerunwon',
    'forester',
    'gentiluomo',
    'headman',
    'intendant',
    'lamido',
    'marcher',
    'prior',
    'pursuivant',
    'rangatira',
    'ranger',
    'registrar',
    'seigneur',
    'shehu',
    'sheikh',
    'sheriff',
    'subaltern',
    'subedar',
    'sysselmann',
    'timi',
    'treasurer',
    'verderer',
    'warden',
    'hereditary',
    'woodman',
    'bearer',
    'banner',
    'swordbearer',
    'apprentice',
    'journeyman',
    'adept',
    'akhoond',
    'arhat',
    'bwana',
    'bard',
    'hajji',
    'baba',
    'effendi',
    'giani',
    'gyani',
    'guru',
    'siddha',
    'pir',
    'murshid',
    'attache',
    'prime',
    'united',
    'states',
    'national',
    'associate',
    'assoc',
    'assistant',
    'asst',
    'supreme',
    'appellate',
    'judicial',
    "queen's",
    "king's",
    'bench',
    'right',
    'majesty',
    'kingdom',
    'royal',
    'honorable',
    'honourable',
    'hon',
    'magistrate',
    'mag',
    'judge',
    'designated',
    'us',
    'uk',
    'federal',
    'district',
    'arbitrator',
    'pro',
    'se',
    'law',
    'clerk',
    'docket',
    'pslc',
    'special',
    'municipal',
    'tax',
    'civil',
    'criminal',
    'family',
    'presiding',
    'division',
    'edmi',
    'discovery',
    'magistrate-judge',
    'mag-judge',
    'senior-judge',
    'mag/judge',
])

# Taken from https://github.com/derek73/python-nameparser/blob/master/nameparser/config/prefixes.py
# & https://github.com/derek73/python-nameparser/blob/master/nameparser/config/suffixes.py

#: Name pieces that appear before a last name. Prefixes join to the piece
#: that follows them to make one new piece. They can be chained together, e.g
#: "von der" and "de la". Because they only appear in middle or last names,
#: they also signifiy that all following name pieces should be in the same name
#: part, for example, "von" will be joined to all following pieces that are not
#: prefixes or suffixes, allowing recognition of double last names when they
#: appear after a prefixes. So in "pennie von bergen wessels MD", "von" will
#: join with all following name pieces until the suffix "MD", resulting in the
#: correct parsing of the last name "von bergen wessels".
DK_PREFIXES = set([
    'abu',
    'bin',
    'bon',
    'da',
    'dal',
    'de',
    'degli',
    'dei',
    'del',
    'dela',
    'della',
    'delle',
    'delli',
    'dello',
    'der',
    'di',
    'dí',
    'do',
    'dos',
    'du',
    'ibn',
    'la',
    'le',
    'san',
    'santa',
    'st',
    'ste',
    'van',
    'vel',
    'von',
])

DK_SUFFIXES = set([
    'dr',
    'esq',
    'esquire',
    'jr',
    'jnr',
    'junior',
    'sr',
    'snr',

#Plus

    'ae',
    'afc',
    'afm',
    'arrc',
    'bart',
    'bem',
    'bt',
    'cb',
    'cbe',
    'cfp',
    'cgc',
    'cgm',
    'ch',
    'chfc',
    'cie',
    'clu',
    'cmg',
    'cpa',
    'cpm',
    'csi',
    'csm',
    'cvo',
    'dbe',
    'dcb',
    'dcm',
    'dcmg',
    'dcvo',
    'dds',
    'dfc',
    'dfm',
    'dmd',
    'do',
    'dpm',
    'dsc',
    'dsm',
    'dso',
    'dvm',
    'ed',
    'erd',
    'gbe',
    'gc',
    'gcb',
    'gcie',
    'gcmg',
    'gcsi',
    'gcvo',
    'gm',
    'idsm',
    'iom',
    'iso',
    'jd',
    'kbe',
    'kcb',
    'kcie',
    'kcmg',
    'kcsi',
    'kcvo',
    'kg',
    'kp',
    'kt',
    'lg',
    'lt',
    'lvo',
    'ma',
    'mba',
    'mbe',
    'mc',
    'md',
    'mm',
    'mp',
    'msc'
    'msm',
    'mvo',
    'obe',
    'obi',
    'om',
    'phd',
    'phr',
    'pmp',
    'qam',
    'qc',
    'qfsm',
    'qgm',
    'qpm',
    'rd',
    'rrc',
    'rvm',
    'sgm',
    'td',
    'ud',
    'vc',
    'vd',
    'vrd',
])

DK_AFFIXES = DK_PREFIXES.union(DK_SUFFIXES)

PARTICLE_SYNONYMS = [
    ('jnr', 'jr', 'junior'),
    ('snr', 'sr', 'senior'),
]
